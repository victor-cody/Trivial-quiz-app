[
	{
		"question": "Which operator returns true if the two compared values are not equal?",
		"answers": {
			"choice1": "()",
			"choice2": "~",
			"choice3": "==!",
			"choice4": "!=="
		},
		"correct": 3
	},
	{
		"question": "Which of the statements is the correct way to create a variable called rate and assign it a value of 100?",
		"answers": {
			"choice1": "let rate = 100;",
			"choice2": "let 100 = rate;",
			"choice3": "100 = let rate;",
			"choice4": "rate = 100;"
		},
		"correct": 0
	},
	{
		"question": "Which of the statements creates a new function called totalPrice?",
		"answers": {
			"choice1": "let totalPrice = function(price) { return price * 0.85; };",
			"choice2": "let totalPrice(price) { return price * 0.85; };",
			"choice3": "let function = totalPrice(price) { return price * 0.85; };",
			"choice4": "totalPrice = function(price) { return price * 0.85; };"
		},
		"correct": 0
	},
	{
		"question": "What is the property that references the DOM element/object that dispatched an event?",
		"answers": {
			"choice1": "self",
			"choice2": "object",
			"choice3": "target",
			"choice4": "source"
		},
		"correct": 2 
	},
	{
		"question": "What method converts JSON data to a JavaScript object?",
		"answers": {
			"choice1": "JSON.fromString()",
			"choice2": "JSON.parse()",
			"choice3": "JSON.toObject()",
			"choice4": "JSON.stringify()"
		},
		"correct": 1
	},
	{
		"question": "Which Variable-defining keyword allows its variable to be accessed (as undefined) even before the line that defines it?",
		"answers": {
			"choice1": "all of them",
			"choice2": "const",
			"choice3": "var",
			"choice4": "let"
		},
		"correct": 2
	},
	{
		"question": "Which of these is not a keyword in JavaScript?",
		"answers": {
			"choice1": "this",
			"choice2": "catch",
			"choice3": "function",
			"choice4": "array"
		},
		"correct": 3
	},
	{
		"question": "What method converts a JavaScript object to JSON format",
		"answers": {
			"choice1": "JSON.parse()",
			"choice2": "JSON.fromString()",
			"choice3": "JSON.stringify()",
			"choice4": "JSON.parse()"
		},
		"correct": 2
	},
	{
		"question": "Your code is producing the error: TypeError: Cannot read property 'reduce' of undefined. What does that mean?",
		"answers": {
			"choice1": "You are calling a method named reduce on an object that's declared but has no value.",
			"choice2": "You are calling a method named reduce on an object that does not exist.",
			"choice3": "You are calling a method named reduce on an empty array.",
			"choice4": "You are calling a method named reduce on an object that's has a null value."
		},
		"correct": 1
	},
	{
		"question": "Which choice is an incorrect way to define an arrow function that returns an empty object?",
		"answers": {
			"choice1": "() => ({})",
			"choice2": "() => {}",
			"choice3": "() => { return {};}",
			"choice4": "() => (({}))"
		},
		"correct": 1
	},
	{
		"question": "What keyword is used to create an error?",
		"answers": {
			"choice1": "throw",
			"choice2": "exception",
			"choice3": "catch",
			"choice4": "error"
		},
		"correct": 0
	},
	{
		"question": "Which statement references the DOM element created by the code shown? \n <p class='pull'>lorem ipsum</p>",
		"answers": {
			"choice1": "Document.querySelector('class.pull')",
			"choice2": "document.querySelector('.pull')",
			"choice3": "document.querySelector('pull')",
			"choice4": "document.querySelector('#pull')"
		},
		"correct": 1
	},
	{
		"question": "What is the correct method to cancel an event default behavior?",
		"answers": {
			"choice1": "cancel()",
			"choice2": "stop()",
			"choice3": "preventDefault()",
			"choice4": "prevent()"
		},
		"correct": 2
	}, {
		"question": "This program has a problem. What is it?\nvar a;\nvar b = (a = 3) ? true : false;",
		"answers": {
			"choice1": "You cannot use a ternary operator in the right-hand side of an assignment.",
			"choice2": "You cannot define a variable without initializing it first.",
			"choice3": "The condition in the ternary statement is using the assignment operator.",
			"choice4": "The code is using the deprecated var keyword."
		},
		"correct": 2
	},
	{
		"question": "Which statement is used to skip iteration of the loop?",
		"answers": {
			"choice1": "break",
			"choice2": "pass",
			"choice3": "skip",
			"choice4": "continue"
		},
		"correct": 3
	},
	{
		"question": "How do you add an inline comment to JavaScript code?",
		"answers": {
			"choice1": "*! This is a comment*",
			"choice2": "*# This is a comment*",
			"choice3": "*\\ This is a comment*",
			"choice4": "*// This is a comment*"
		},
		"correct": 3
	},
	{
		"question": "Which statement correctly selects all img elements in the DOM tree?",
		"answers": {
			"choice1": "document.querySelector('img')",
			"choice2": "document.querySelectorAll('<img>')",
			"choice3": "document.querySelectorAll('img')",
			"choice4": "document.querySelector('<img>')"
		},
		"correct": 2
	},
	{
		"question": "In React which class-based lifecycle method would be called at the same time as the useEffect Hook?",
		"answers": {
			"choice1": "componentWillUnmount",
			"choice2": "componentDidUpdate",
			"choice3": "render",
			"choice4": "componentDidMount"
		},
		"correct": 3
	}, {
		"question": "What event is fired on a text field within a form when a user tabs to it, or clicks or touches it?",
		"answers": {
			"choice1": "focus",
			"choice2": "blur",
			"choice3": "hover",
			"choice4": "enter"
		},
		"correct": 0
	},
	{
		"question": "You've written the event listener shown below for a form button, but each time you click the button, the page reloads. What statement would you add to stop this from happening?\nbutton.addEventListener('click',function (e) {\nbutton.className = 'clicked';}\n);",
		"answers": {
			"choice1": "e.blockReload()",
			"choice2": "button.preventDefault()",
			"choice3": "button.blockReload()",
			"choice4": "e.preventDefault()"
		},
		"correct": 3
	},
]
